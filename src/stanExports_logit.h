// Generated by rstantools.  Do not edit by hand.

/*
    baggr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    baggr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with baggr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_logit_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 140> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 62, column 2 to column 48)",
  " (in 'string', line 63, column 2 to column 35)",
  " (in 'string', line 64, column 2 to column 58)",
  " (in 'string', line 65, column 2 to column 45)",
  " (in 'string', line 66, column 2 to column 23)",
  " (in 'string', line 67, column 2 to column 36)",
  " (in 'string', line 68, column 2 to column 18)",
  " (in 'string', line 71, column 2 to column 27)",
  " (in 'string', line 72, column 2 to column 23)",
  " (in 'string', line 119, column 2 to column 31)",
  " (in 'string', line 120, column 2 to column 52)",
  " (in 'string', line 121, column 2 to column 25)",
  " (in 'string', line 76, column 4 to column 35)",
  " (in 'string', line 75, column 31 to line 77, column 3)",
  " (in 'string', line 75, column 9 to line 77, column 3)",
  " (in 'string', line 74, column 4 to column 18)",
  " (in 'string', line 73, column 24 to line 75, column 3)",
  " (in 'string', line 73, column 2 to line 77, column 3)",
  " (in 'string', line 83, column 4 to column 36)",
  " (in 'string', line 81, column 4 to column 63)",
  " (in 'string', line 80, column 35 to line 82, column 3)",
  " (in 'string', line 80, column 9 to line 83, column 36)",
  " (in 'string', line 79, column 4 to column 30)",
  " (in 'string', line 78, column 28 to line 80, column 3)",
  " (in 'string', line 78, column 2 to line 83, column 36)",
  " (in 'string', line 126, column 6 to column 28)",
  " (in 'string', line 124, column 6 to column 40)",
  " (in 'string', line 123, column 4 to line 126, column 28)",
  " (in 'string', line 127, column 4 to column 17)",
  " (in 'string', line 130, column 8 to column 52)",
  " (in 'string', line 129, column 6 to line 130, column 52)",
  " (in 'string', line 132, column 8 to line 133, column 94)",
  " (in 'string', line 128, column 25 to line 134, column 5)",
  " (in 'string', line 128, column 4 to line 134, column 5)",
  " (in 'string', line 136, column 8 to line 137, column 75)",
  " (in 'string', line 135, column 25 to line 138, column 5)",
  " (in 'string', line 135, column 4 to line 138, column 5)",
  " (in 'string', line 122, column 16 to line 139, column 3)",
  " (in 'string', line 122, column 2 to line 139, column 3)",
  " (in 'string', line 87, column 9 to column 10)",
  " (in 'string', line 87, column 2 to column 15)",
  " (in 'string', line 92, column 6 to column 18)",
  " (in 'string', line 93, column 6 to column 54)",
  " (in 'string', line 91, column 11 to line 94, column 5)",
  " (in 'string', line 90, column 6 to column 30)",
  " (in 'string', line 89, column 15 to line 91, column 5)",
  " (in 'string', line 89, column 4 to line 94, column 5)",
  " (in 'string', line 88, column 11 to line 95, column 3)",
  " (in 'string', line 88, column 2 to line 95, column 3)",
  " (in 'string', line 100, column 4 to column 31)",
  " (in 'string', line 101, column 4 to column 70)",
  " (in 'string', line 102, column 4 to column 76)",
  " (in 'string', line 99, column 35 to line 103, column 3)",
  " (in 'string', line 99, column 9 to line 103, column 3)",
  " (in 'string', line 98, column 4 to column 66)",
  " (in 'string', line 97, column 27 to line 99, column 3)",
  " (in 'string', line 97, column 2 to line 103, column 3)",
  " (in 'string', line 114, column 4 to column 64)",
  " (in 'string', line 115, column 4 to column 67)",
  " (in 'string', line 113, column 9 to line 116, column 3)",
  " (in 'string', line 109, column 4 to column 22)",
  " (in 'string', line 110, column 4 to column 61)",
  " (in 'string', line 111, column 4 to column 64)",
  " (in 'string', line 112, column 4 to column 76)",
  " (in 'string', line 108, column 30 to line 113, column 3)",
  " (in 'string', line 108, column 9 to line 116, column 3)",
  " (in 'string', line 106, column 4 to column 61)",
  " (in 'string', line 107, column 4 to column 76)",
  " (in 'string', line 105, column 23 to line 108, column 3)",
  " (in 'string', line 105, column 2 to line 116, column 3)",
  " (in 'string', line 25, column 2 to column 17)",
  " (in 'string', line 26, column 2 to column 17)",
  " (in 'string', line 27, column 2 to column 18)",
  " (in 'string', line 28, column 9 to column 10)",
  " (in 'string', line 28, column 11 to column 13)",
  " (in 'string', line 28, column 2 to column 17)",
  " (in 'string', line 29, column 2 to column 19)",
  " (in 'string', line 30, column 2 to column 23)",
  " (in 'string', line 32, column 8 to column 9)",
  " (in 'string', line 32, column 2 to column 37)",
  " (in 'string', line 33, column 26 to column 27)",
  " (in 'string', line 33, column 2 to column 39)",
  " (in 'string', line 35, column 2 to column 24)",
  " (in 'string', line 36, column 2 to column 27)",
  " (in 'string', line 37, column 2 to column 30)",
  " (in 'string', line 38, column 2 to column 33)",
  " (in 'string', line 40, column 2 to column 26)",
  " (in 'string', line 41, column 2 to column 24)",
  " (in 'string', line 42, column 2 to column 21)",
  " (in 'string', line 43, column 2 to column 32)",
  " (in 'string', line 44, column 2 to column 30)",
  " (in 'string', line 45, column 2 to column 27)",
  " (in 'string', line 47, column 2 to column 22)",
  " (in 'string', line 48, column 2 to column 22)",
  " (in 'string', line 49, column 9 to column 15)",
  " (in 'string', line 49, column 17 to column 19)",
  " (in 'string', line 49, column 2 to column 28)",
  " (in 'string', line 50, column 8 to column 14)",
  " (in 'string', line 50, column 2 to column 48)",
  " (in 'string', line 51, column 27 to column 33)",
  " (in 'string', line 51, column 2 to column 50)",
  " (in 'string', line 53, column 8 to column 9)",
  " (in 'string', line 53, column 2 to column 34)",
  " (in 'string', line 54, column 8 to column 14)",
  " (in 'string', line 54, column 2 to column 44)",
  " (in 'string', line 57, column 2 to column 43)",
  " (in 'string', line 58, column 2 to column 51)",
  " (in 'string', line 62, column 8 to column 29)",
  " (in 'string', line 63, column 8 to column 25)",
  " (in 'string', line 64, column 8 to column 29)",
  " (in 'string', line 65, column 8 to column 25)",
  " (in 'string', line 66, column 9 to column 17)",
  " (in 'string', line 67, column 9 to column 21)",
  " (in 'string', line 68, column 9 to column 11)",
  " (in 'string', line 71, column 9 to column 17)",
  " (in 'string', line 72, column 9 to column 10)",
  " (in 'string', line 119, column 8 to column 18)",
  " (in 'string', line 120, column 9 to column 37)",
  " (in 'string', line 121, column 9 to column 15)",
  " (in 'string', line 11, column 9 to column 66)",
  " (in 'string', line 9, column 25 to column 73)",
  " (in 'string', line 9, column 9 to line 11, column 66)",
  " (in 'string', line 6, column 25 to column 70)",
  " (in 'string', line 6, column 9 to line 11, column 66)",
  " (in 'string', line 5, column 25 to column 70)",
  " (in 'string', line 5, column 9 to line 11, column 66)",
  " (in 'string', line 4, column 20 to column 66)",
  " (in 'string', line 4, column 4 to line 11, column 66)",
  " (in 'string', line 3, column 60 to line 12, column 3)",
  " (in 'string', line 20, column 9 to column 66)",
  " (in 'string', line 18, column 25 to column 73)",
  " (in 'string', line 18, column 9 to line 20, column 66)",
  " (in 'string', line 17, column 25 to column 70)",
  " (in 'string', line 17, column 9 to line 20, column 66)",
  " (in 'string', line 16, column 25 to column 70)",
  " (in 'string', line 16, column 9 to line 20, column 66)",
  " (in 'string', line 15, column 20 to column 66)",
  " (in 'string', line 15, column 4 to line 20, column 66)",
  " (in 'string', line 14, column 61 to line 21, column 3)"};
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T2__>>
realprior_lpdf(const T0__& theta, const int& family, const T2__& pars_arg__,
               std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>>
vecprior_lpdf(const T0__& theta_arg__, const int& family, const T2__&
              pars_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T2__>>
realprior_lpdf(const T0__& theta, const int& family, const T2__& pars_arg__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& pars = stan::math::to_ref(pars_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 128;
    if (stan::math::logical_eq(family, 0)) {
      current_statement__ = 127;
      return stan::math::uniform_lpdf<false>(theta,
               stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
               stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
    } else {
      current_statement__ = 126;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 125;
        return stan::math::normal_lpdf<false>(theta,
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
      } else {
        current_statement__ = 124;
        if (stan::math::logical_eq(family, 2)) {
          current_statement__ = 123;
          return stan::math::cauchy_lpdf<false>(theta,
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(1)),
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(2)));
        } else {
          current_statement__ = 122;
          if (stan::math::logical_eq(family, 5)) {
            current_statement__ = 121;
            return stan::math::lognormal_lpdf<false>(theta,
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(2)));
          } else {
            current_statement__ = 120;
            return stan::math::student_t_lpdf<false>(theta,
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(2)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(3)));
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>>
vecprior_lpdf(const T0__& theta_arg__, const int& family, const T2__&
              pars_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& theta = stan::math::to_ref(theta_arg__);
  const auto& pars = stan::math::to_ref(pars_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 138;
    if (stan::math::logical_eq(family, 0)) {
      current_statement__ = 137;
      return stan::math::uniform_lpdf<false>(theta,
               stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
               stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
    } else {
      current_statement__ = 136;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 135;
        return stan::math::normal_lpdf<false>(theta,
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
      } else {
        current_statement__ = 134;
        if (stan::math::logical_eq(family, 2)) {
          current_statement__ = 133;
          return stan::math::cauchy_lpdf<false>(theta,
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(1)),
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(2)));
        } else {
          current_statement__ = 132;
          if (stan::math::logical_eq(family, 5)) {
            current_statement__ = 131;
            return stan::math::lognormal_lpdf<false>(theta,
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(2)));
          } else {
            current_statement__ = 130;
            return stan::math::student_t_lpdf<false>(theta,
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(2)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(3)));
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_logit final : public model_base_crtp<model_logit> {
private:
  int N;
  int K;
  int Nc;
  Eigen::Matrix<double,-1,-1> X_data__;
  int pooling_type;
  int pooling_baseline;
  std::vector<int> site;
  Eigen::Matrix<double,-1,1> treatment_data__;
  int prior_control_fam;
  int prior_control_sd_fam;
  Eigen::Matrix<double,-1,1> prior_control_val_data__;
  Eigen::Matrix<double,-1,1> prior_control_sd_val_data__;
  int prior_hypermean_fam;
  int prior_hypersd_fam;
  int prior_beta_fam;
  Eigen::Matrix<double,-1,1> prior_hypermean_val_data__;
  Eigen::Matrix<double,-1,1> prior_hypersd_val_data__;
  Eigen::Matrix<double,-1,1> prior_beta_val_data__;
  int N_test;
  int K_test;
  Eigen::Matrix<double,-1,-1> X_test_data__;
  std::vector<int> test_site;
  Eigen::Matrix<double,-1,1> test_treatment_data__;
  std::vector<int> y;
  std::vector<int> test_y;
  int K_pooled;
  int K_bsl_pooled;
  int mu_baseline_1dim__;
  int mu_1dim__;
  int tau_baseline_1dim__;
  int tau_1dim__;
  int logpd_1dim__;
  int theta_k_test_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> treatment{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_control_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_control_sd_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_hypermean_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_hypersd_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_beta_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_test{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> test_treatment{nullptr, 0};
public:
  ~model_logit() {}
  model_logit(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_logit_namespace::model_logit";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 71;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 71;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 72;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "Nc", "int",
        std::vector<size_t>{});
      Nc = std::numeric_limits<int>::min();
      current_statement__ = 73;
      Nc = context__.vals_i("Nc")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "Nc", Nc, 0);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("X", "Nc", Nc);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(Nc)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Nc,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N,
        Nc);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 76;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 76;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 76;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 76;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 77;
      context__.validate_dims("data initialization", "pooling_type", "int",
        std::vector<size_t>{});
      pooling_type = std::numeric_limits<int>::min();
      current_statement__ = 77;
      pooling_type = context__.vals_i("pooling_type")[(1 - 1)];
      current_statement__ = 78;
      context__.validate_dims("data initialization", "pooling_baseline",
        "int", std::vector<size_t>{});
      pooling_baseline = std::numeric_limits<int>::min();
      current_statement__ = 78;
      pooling_baseline = context__.vals_i("pooling_baseline")[(1 - 1)];
      current_statement__ = 79;
      stan::math::validate_non_negative_index("site", "N", N);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "site", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      site = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 80;
      site = context__.vals_i("site");
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "site", site, 0);
      current_statement__ = 80;
      stan::math::check_less_or_equal(function__, "site", site, K);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("treatment", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "treatment", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      treatment_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                           std::numeric_limits<double>::quiet_NaN());
      new (&treatment)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(treatment_data__.data(), N);
      {
        std::vector<local_scalar_t__> treatment_flat__;
        current_statement__ = 82;
        treatment_flat__ = context__.vals_r("treatment");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 82;
          stan::model::assign(treatment, treatment_flat__[(pos__ - 1)],
            "assigning variable treatment", stan::model::index_uni(sym1__));
          current_statement__ = 82;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "treatment", treatment,
        0);
      current_statement__ = 82;
      stan::math::check_less_or_equal(function__, "treatment", treatment, 1);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "prior_control_fam",
        "int", std::vector<size_t>{});
      prior_control_fam = std::numeric_limits<int>::min();
      current_statement__ = 83;
      prior_control_fam = context__.vals_i("prior_control_fam")[(1 - 1)];
      current_statement__ = 84;
      context__.validate_dims("data initialization", "prior_control_sd_fam",
        "int", std::vector<size_t>{});
      prior_control_sd_fam = std::numeric_limits<int>::min();
      current_statement__ = 84;
      prior_control_sd_fam = context__.vals_i("prior_control_sd_fam")[(1 -
        1)];
      current_statement__ = 85;
      context__.validate_dims("data initialization", "prior_control_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_control_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&prior_control_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_control_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_control_val_flat__;
        current_statement__ = 85;
        prior_control_val_flat__ = context__.vals_r("prior_control_val");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 85;
          stan::model::assign(prior_control_val,
            prior_control_val_flat__[(pos__ - 1)],
            "assigning variable prior_control_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 85;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 86;
      context__.validate_dims("data initialization", "prior_control_sd_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_control_sd_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                      std::numeric_limits<double>::quiet_NaN());
      new (&prior_control_sd_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_control_sd_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_control_sd_val_flat__;
        current_statement__ = 86;
        prior_control_sd_val_flat__ = context__.vals_r("prior_control_sd_val");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 86;
          stan::model::assign(prior_control_sd_val,
            prior_control_sd_val_flat__[(pos__ - 1)],
            "assigning variable prior_control_sd_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 86;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 87;
      context__.validate_dims("data initialization", "prior_hypermean_fam",
        "int", std::vector<size_t>{});
      prior_hypermean_fam = std::numeric_limits<int>::min();
      current_statement__ = 87;
      prior_hypermean_fam = context__.vals_i("prior_hypermean_fam")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization", "prior_hypersd_fam",
        "int", std::vector<size_t>{});
      prior_hypersd_fam = std::numeric_limits<int>::min();
      current_statement__ = 88;
      prior_hypersd_fam = context__.vals_i("prior_hypersd_fam")[(1 - 1)];
      current_statement__ = 89;
      context__.validate_dims("data initialization", "prior_beta_fam", "int",
        std::vector<size_t>{});
      prior_beta_fam = std::numeric_limits<int>::min();
      current_statement__ = 89;
      prior_beta_fam = context__.vals_i("prior_beta_fam")[(1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization", "prior_hypermean_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_hypermean_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&prior_hypermean_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_hypermean_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_hypermean_val_flat__;
        current_statement__ = 90;
        prior_hypermean_val_flat__ = context__.vals_r("prior_hypermean_val");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 90;
          stan::model::assign(prior_hypermean_val,
            prior_hypermean_val_flat__[(pos__ - 1)],
            "assigning variable prior_hypermean_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 90;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      context__.validate_dims("data initialization", "prior_hypersd_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_hypersd_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&prior_hypersd_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_hypersd_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_hypersd_val_flat__;
        current_statement__ = 91;
        prior_hypersd_val_flat__ = context__.vals_r("prior_hypersd_val");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 91;
          stan::model::assign(prior_hypersd_val,
            prior_hypersd_val_flat__[(pos__ - 1)],
            "assigning variable prior_hypersd_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 91;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 92;
      context__.validate_dims("data initialization", "prior_beta_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_beta_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                std::numeric_limits<double>::quiet_NaN());
      new (&prior_beta_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_beta_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_beta_val_flat__;
        current_statement__ = 92;
        prior_beta_val_flat__ = context__.vals_r("prior_beta_val");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 92;
          stan::model::assign(prior_beta_val, prior_beta_val_flat__[(pos__ -
            1)], "assigning variable prior_beta_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization", "N_test", "int",
        std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      current_statement__ = 93;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "N_test", N_test, 0);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "K_test", "int",
        std::vector<size_t>{});
      K_test = std::numeric_limits<int>::min();
      current_statement__ = 94;
      K_test = context__.vals_i("K_test")[(1 - 1)];
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "K_test", K_test, 0);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("X_test", "N_test", N_test);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("X_test", "Nc", Nc);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "X_test", "double",
        std::vector<size_t>{static_cast<size_t>(N_test),
          static_cast<size_t>(Nc)});
      X_test_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_test, Nc,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X_test)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_test_data__.data(), N_test,
        Nc);
      {
        std::vector<local_scalar_t__> X_test_flat__;
        current_statement__ = 97;
        X_test_flat__ = context__.vals_r("X_test");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 97;
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            current_statement__ = 97;
            stan::model::assign(X_test, X_test_flat__[(pos__ - 1)],
              "assigning variable X_test", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 97;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 98;
      stan::math::validate_non_negative_index("test_site", "N_test", N_test);
      current_statement__ = 99;
      context__.validate_dims("data initialization", "test_site", "int",
        std::vector<size_t>{static_cast<size_t>(N_test)});
      test_site = std::vector<int>(N_test, std::numeric_limits<int>::min());
      current_statement__ = 99;
      test_site = context__.vals_i("test_site");
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "test_site", test_site,
        0);
      current_statement__ = 99;
      stan::math::check_less_or_equal(function__, "test_site", test_site, K);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("test_treatment", "N_test",
        N_test);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "test_treatment",
        "double", std::vector<size_t>{static_cast<size_t>(N_test)});
      test_treatment_data__ = Eigen::Matrix<double,-1,1>::Constant(N_test,
                                std::numeric_limits<double>::quiet_NaN());
      new (&test_treatment)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(test_treatment_data__.data(),
        N_test);
      {
        std::vector<local_scalar_t__> test_treatment_flat__;
        current_statement__ = 101;
        test_treatment_flat__ = context__.vals_r("test_treatment");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
          current_statement__ = 101;
          stan::model::assign(test_treatment, test_treatment_flat__[(pos__ -
            1)], "assigning variable test_treatment",
            stan::model::index_uni(sym1__));
          current_statement__ = 101;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "test_treatment",
        test_treatment, 0);
      current_statement__ = 101;
      stan::math::check_less_or_equal(function__, "test_treatment",
        test_treatment, 1);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 103;
      y = context__.vals_i("y");
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 103;
      stan::math::check_less_or_equal(function__, "y", y, 1);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("test_y", "N_test", N_test);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "test_y", "int",
        std::vector<size_t>{static_cast<size_t>(N_test)});
      test_y = std::vector<int>(N_test, std::numeric_limits<int>::min());
      current_statement__ = 105;
      test_y = context__.vals_i("test_y");
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "test_y", test_y, 0);
      current_statement__ = 105;
      stan::math::check_less_or_equal(function__, "test_y", test_y, 1);
      current_statement__ = 106;
      K_pooled = std::numeric_limits<int>::min();
      current_statement__ = 106;
      K_pooled = (stan::math::logical_eq(pooling_type, 2) ? 0 : K);
      current_statement__ = 107;
      K_bsl_pooled = std::numeric_limits<int>::min();
      current_statement__ = 107;
      K_bsl_pooled = (stan::math::logical_eq(pooling_baseline, 2) ? 0 : K);
      current_statement__ = 108;
      mu_baseline_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 108;
      mu_baseline_1dim__ = stan::math::logical_eq(pooling_baseline, 1);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("mu_baseline",
        "pooling_baseline == 1", mu_baseline_1dim__);
      current_statement__ = 109;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 109;
      mu_1dim__ = stan::math::logical_neq(pooling_type, 0);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("mu", "pooling_type != 0",
        mu_1dim__);
      current_statement__ = 110;
      tau_baseline_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 110;
      tau_baseline_1dim__ = stan::math::logical_eq(pooling_baseline, 1);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("tau_baseline",
        "pooling_baseline == 1", tau_baseline_1dim__);
      current_statement__ = 111;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 111;
      tau_1dim__ = stan::math::logical_eq(pooling_type, 1);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("tau", "pooling_type == 1",
        tau_1dim__);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("eta", "K_pooled", K_pooled);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("eta_baseline", "K_bsl_pooled",
        K_bsl_pooled);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("beta", "Nc", Nc);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("theta_k", "K_pooled", K_pooled);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("baseline_k", "K", K);
      current_statement__ = 117;
      logpd_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 117;
      logpd_1dim__ = stan::math::logical_gt(K_test, 0);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("logpd", "K_test > 0",
        logpd_1dim__);
      current_statement__ = 118;
      theta_k_test_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 118;
      theta_k_test_1dim__ = (stan::math::logical_eq(pooling_type, 1) ? K_test : 0);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("theta_k_test",
        "pooling_type == 1 ? K_test : 0", theta_k_test_1dim__);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("fe_test", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = mu_baseline_1dim__ + mu_1dim__ + tau_baseline_1dim__ +
      tau_1dim__ + K_pooled + K_bsl_pooled + Nc;
  }
  inline std::string model_name() const final {
    return "model_logit";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_logit_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> mu_baseline =
        std::vector<local_scalar_t__>(mu_baseline_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      mu_baseline = in__.template read<
                      std::vector<local_scalar_t__>>(mu_baseline_1dim__);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      mu = in__.template read<std::vector<local_scalar_t__>>(mu_1dim__);
      std::vector<local_scalar_t__> tau_baseline =
        std::vector<local_scalar_t__>(tau_baseline_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      tau_baseline = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       tau_baseline_1dim__);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      tau = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_pooled, DUMMY_VAR__);
      current_statement__ = 5;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(K_pooled);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_baseline =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_bsl_pooled,
          DUMMY_VAR__);
      current_statement__ = 6;
      eta_baseline = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(K_bsl_pooled);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 7;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_pooled, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> baseline_k =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 18;
      if (stan::math::logical_eq(pooling_type, 0)) {
        current_statement__ = 16;
        stan::model::assign(theta_k, eta, "assigning variable theta_k");
      } else {
        current_statement__ = 15;
        if (stan::math::logical_eq(pooling_type, 1)) {
          current_statement__ = 13;
          stan::model::assign(theta_k,
            stan::math::add(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(1)),
              stan::math::multiply(
                stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                eta)), "assigning variable theta_k");
        }
      }
      current_statement__ = 25;
      if (stan::math::logical_eq(pooling_baseline, 0)) {
        current_statement__ = 23;
        stan::model::assign(baseline_k, eta_baseline,
          "assigning variable baseline_k");
      } else {
        current_statement__ = 22;
        if (stan::math::logical_eq(pooling_baseline, 1)) {
          current_statement__ = 20;
          stan::model::assign(baseline_k,
            stan::math::add(
              stan::model::rvalue(mu_baseline, "mu_baseline",
                stan::model::index_uni(1)),
              stan::math::multiply(
                stan::model::rvalue(tau_baseline, "tau_baseline",
                  stan::model::index_uni(1)), eta_baseline)),
            "assigning variable baseline_k");
        } else {
          current_statement__ = 19;
          stan::model::assign(baseline_k, stan::math::rep_vector(0.0, K),
            "assigning variable baseline_k");
        }
      }
      {
        current_statement__ = 40;
        stan::math::validate_non_negative_index("fe", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> fe =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 49;
        if (stan::math::logical_gt(N, 0)) {
          current_statement__ = 47;
          if (stan::math::logical_eq(Nc, 0)) {
            current_statement__ = 45;
            stan::model::assign(fe, stan::math::rep_vector(0.0, N),
              "assigning variable fe");
          } else {
            current_statement__ = 42;
            stan::model::assign(fe, stan::math::multiply(X, beta),
              "assigning variable fe");
            current_statement__ = 43;
            lp_accum__.add(vecprior_lpdf<propto__>(beta, prior_beta_fam,
                             prior_beta_val, pstream__));
          }
        }
        current_statement__ = 57;
        if (stan::math::logical_eq(pooling_baseline, 0)) {
          current_statement__ = 55;
          lp_accum__.add(vecprior_lpdf<propto__>(eta_baseline,
                           prior_control_fam, prior_control_val, pstream__));
        } else {
          current_statement__ = 54;
          if (stan::math::logical_eq(pooling_baseline, 1)) {
            current_statement__ = 50;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(eta_baseline, 0,
                             1));
            current_statement__ = 51;
            lp_accum__.add(realprior_lpdf<propto__>(
                             stan::model::rvalue(mu_baseline, "mu_baseline",
                               stan::model::index_uni(1)), prior_control_fam,
                             prior_control_val, pstream__));
            current_statement__ = 52;
            lp_accum__.add(realprior_lpdf<propto__>(
                             stan::model::rvalue(tau_baseline,
                               "tau_baseline", stan::model::index_uni(1)),
                             prior_control_sd_fam, prior_control_sd_val,
                             pstream__));
          }
        }
        current_statement__ = 70;
        if (stan::math::logical_eq(pooling_type, 0)) {
          current_statement__ = 67;
          lp_accum__.add(vecprior_lpdf<propto__>(eta, prior_hypermean_fam,
                           prior_hypermean_val, pstream__));
          current_statement__ = 68;
          lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(y,
                           stan::math::add(
                             stan::math::add(
                               stan::model::rvalue(baseline_k, "baseline_k",
                                 stan::model::index_multi(site)),
                               stan::math::elt_multiply(
                                 stan::model::rvalue(theta_k, "theta_k",
                                   stan::model::index_multi(site)), treatment)),
                             fe)));
        } else {
          current_statement__ = 66;
          if (stan::math::logical_eq(pooling_type, 1)) {
            current_statement__ = 61;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(eta, 0, 1));
            current_statement__ = 62;
            lp_accum__.add(realprior_lpdf<propto__>(
                             stan::model::rvalue(tau, "tau",
                               stan::model::index_uni(1)), prior_hypersd_fam,
                             prior_hypersd_val, pstream__));
            current_statement__ = 63;
            lp_accum__.add(realprior_lpdf<propto__>(
                             stan::model::rvalue(mu, "mu",
                               stan::model::index_uni(1)),
                             prior_hypermean_fam, prior_hypermean_val,
                             pstream__));
            current_statement__ = 64;
            lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(y,
                             stan::math::add(
                               stan::math::add(
                                 stan::model::rvalue(baseline_k,
                                   "baseline_k",
                                   stan::model::index_multi(site)),
                                 stan::math::elt_multiply(
                                   stan::model::rvalue(theta_k, "theta_k",
                                     stan::model::index_multi(site)),
                                   treatment)), fe)));
          } else {
            current_statement__ = 58;
            lp_accum__.add(realprior_lpdf<propto__>(
                             stan::model::rvalue(mu, "mu",
                               stan::model::index_uni(1)),
                             prior_hypermean_fam, prior_hypermean_val,
                             pstream__));
            current_statement__ = 59;
            lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(y,
                             stan::math::add(
                               stan::math::add(
                                 stan::model::rvalue(baseline_k,
                                   "baseline_k",
                                   stan::model::index_multi(site)),
                                 stan::math::multiply(
                                   stan::model::rvalue(mu, "mu",
                                     stan::model::index_uni(1)), treatment)),
                               fe)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_logit_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> mu_baseline =
        std::vector<double>(mu_baseline_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_baseline = in__.template read<
                      std::vector<local_scalar_t__>>(mu_baseline_1dim__);
      std::vector<double> mu =
        std::vector<double>(mu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      mu = in__.template read<std::vector<local_scalar_t__>>(mu_1dim__);
      std::vector<double> tau_baseline =
        std::vector<double>(tau_baseline_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      tau_baseline = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       tau_baseline_1dim__);
      std::vector<double> tau =
        std::vector<double>(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      tau = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, tau_1dim__);
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(K_pooled,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(K_pooled);
      Eigen::Matrix<double,-1,1> eta_baseline =
        Eigen::Matrix<double,-1,1>::Constant(K_bsl_pooled,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      eta_baseline = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(K_bsl_pooled);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(Nc,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc);
      Eigen::Matrix<double,-1,1> theta_k =
        Eigen::Matrix<double,-1,1>::Constant(K_pooled,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> baseline_k =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu_baseline);
      out__.write(mu);
      out__.write(tau_baseline);
      out__.write(tau);
      out__.write(eta);
      out__.write(eta_baseline);
      out__.write(beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 18;
      if (stan::math::logical_eq(pooling_type, 0)) {
        current_statement__ = 16;
        stan::model::assign(theta_k, eta, "assigning variable theta_k");
      } else {
        current_statement__ = 15;
        if (stan::math::logical_eq(pooling_type, 1)) {
          current_statement__ = 13;
          stan::model::assign(theta_k,
            stan::math::add(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(1)),
              stan::math::multiply(
                stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                eta)), "assigning variable theta_k");
        }
      }
      current_statement__ = 25;
      if (stan::math::logical_eq(pooling_baseline, 0)) {
        current_statement__ = 23;
        stan::model::assign(baseline_k, eta_baseline,
          "assigning variable baseline_k");
      } else {
        current_statement__ = 22;
        if (stan::math::logical_eq(pooling_baseline, 1)) {
          current_statement__ = 20;
          stan::model::assign(baseline_k,
            stan::math::add(
              stan::model::rvalue(mu_baseline, "mu_baseline",
                stan::model::index_uni(1)),
              stan::math::multiply(
                stan::model::rvalue(tau_baseline, "tau_baseline",
                  stan::model::index_uni(1)), eta_baseline)),
            "assigning variable baseline_k");
        } else {
          current_statement__ = 19;
          stan::model::assign(baseline_k, stan::math::rep_vector(0.0, K),
            "assigning variable baseline_k");
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(theta_k);
        out__.write(baseline_k);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> logpd =
        std::vector<double>(logpd_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_k_test =
        Eigen::Matrix<double,-1,1>::Constant(theta_k_test_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fe_test =
        Eigen::Matrix<double,-1,1>::Constant(N_test,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 39;
      if (stan::math::logical_gt(K_test, 0)) {
        current_statement__ = 28;
        if (stan::math::logical_eq(Nc, 0)) {
          current_statement__ = 27;
          stan::model::assign(fe_test, stan::math::rep_vector(0.0, N_test),
            "assigning variable fe_test");
        } else {
          current_statement__ = 26;
          stan::model::assign(fe_test, stan::math::multiply(X_test, beta),
            "assigning variable fe_test");
        }
        current_statement__ = 29;
        stan::model::assign(logpd, 0, "assigning variable logpd",
          stan::model::index_uni(1));
        current_statement__ = 34;
        if (stan::math::logical_eq(pooling_type, 1)) {
          current_statement__ = 31;
          for (int k = 1; k <= K_test; ++k) {
            current_statement__ = 30;
            stan::model::assign(theta_k_test,
              stan::math::normal_rng(
                stan::model::rvalue(mu, "mu", stan::model::index_uni(1)),
                stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                base_rng__), "assigning variable theta_k_test",
              stan::model::index_uni(k));
          }
          current_statement__ = 32;
          stan::model::assign(logpd,
            (stan::model::rvalue(logpd, "logpd", stan::model::index_uni(1)) +
            stan::math::bernoulli_logit_lpmf<false>(test_y,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(baseline_k, "baseline_k",
                    stan::model::index_multi(test_site)),
                  stan::math::elt_multiply(
                    stan::model::rvalue(theta_k_test, "theta_k_test",
                      stan::model::index_multi(test_site)), test_treatment)),
                fe_test))), "assigning variable logpd",
            stan::model::index_uni(1));
        }
        current_statement__ = 37;
        if (stan::math::logical_eq(pooling_type, 2)) {
          current_statement__ = 35;
          stan::model::assign(logpd,
            (stan::model::rvalue(logpd, "logpd", stan::model::index_uni(1)) +
            stan::math::bernoulli_logit_lpmf<false>(test_y,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(baseline_k, "baseline_k",
                    stan::model::index_multi(test_site)),
                  stan::math::multiply(
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(1)),
                    test_treatment)), fe_test))), "assigning variable logpd",
            stan::model::index_uni(1));
        }
      }
      out__.write(logpd);
      out__.write(theta_k_test);
      out__.write(fe_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> mu_baseline =
        std::vector<local_scalar_t__>(mu_baseline_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu_baseline,
        in__.read<std::vector<local_scalar_t__>>(mu_baseline_1dim__),
        "assigning variable mu_baseline");
      out__.write(mu_baseline);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(mu,
        in__.read<std::vector<local_scalar_t__>>(mu_1dim__),
        "assigning variable mu");
      out__.write(mu);
      std::vector<local_scalar_t__> tau_baseline =
        std::vector<local_scalar_t__>(tau_baseline_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(tau_baseline,
        in__.read<std::vector<local_scalar_t__>>(tau_baseline_1dim__),
        "assigning variable tau_baseline");
      out__.write_free_lb(0, tau_baseline);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(tau,
        in__.read<std::vector<local_scalar_t__>>(tau_1dim__),
        "assigning variable tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_pooled, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K_pooled),
        "assigning variable eta");
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_baseline =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_bsl_pooled,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(eta_baseline,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K_bsl_pooled),
        "assigning variable eta_baseline");
      out__.write(eta_baseline);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc),
        "assigning variable beta");
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_baseline",
        "double",
        std::vector<size_t>{static_cast<size_t>(mu_baseline_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(mu_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau_baseline",
        "double",
        std::vector<size_t>{static_cast<size_t>(tau_baseline_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(K_pooled)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "eta_baseline",
        "double", std::vector<size_t>{static_cast<size_t>(K_bsl_pooled)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(Nc)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> mu_baseline =
        std::vector<local_scalar_t__>(mu_baseline_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      mu_baseline = context__.vals_r("mu_baseline");
      out__.write(mu_baseline);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(mu_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      mu = context__.vals_r("mu");
      out__.write(mu);
      std::vector<local_scalar_t__> tau_baseline =
        std::vector<local_scalar_t__>(tau_baseline_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      tau_baseline = context__.vals_r("tau_baseline");
      out__.write_free_lb(0, tau_baseline);
      std::vector<local_scalar_t__> tau =
        std::vector<local_scalar_t__>(tau_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      tau = context__.vals_r("tau");
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_pooled, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 5;
        eta_flat__ = context__.vals_r("eta");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= K_pooled; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(eta, eta_flat__[(pos__ - 1)],
            "assigning variable eta", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> eta_baseline =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K_bsl_pooled,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_baseline_flat__;
        current_statement__ = 6;
        eta_baseline_flat__ = context__.vals_r("eta_baseline");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K_bsl_pooled; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(eta_baseline, eta_baseline_flat__[(pos__ - 1)],
            "assigning variable eta_baseline", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eta_baseline);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 7;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_baseline", "mu", "tau_baseline",
                "tau", "eta", "eta_baseline", "beta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"theta_k", "baseline_k"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"logpd", "theta_k_test", "fe_test"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    mu_baseline_1dim__)},
                std::vector<size_t>{static_cast<size_t>(mu_1dim__)},
                std::vector<size_t>{static_cast<size_t>(tau_baseline_1dim__)},
                std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(K_pooled)},
                std::vector<size_t>{static_cast<size_t>(K_bsl_pooled)},
                std::vector<size_t>{static_cast<size_t>(Nc)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(K_pooled)},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(logpd_1dim__)},
             std::vector<size_t>{static_cast<size_t>(theta_k_test_1dim__)},
             std::vector<size_t>{static_cast<size_t>(N_test)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= mu_baseline_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_baseline" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_baseline_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_baseline" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_pooled; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_bsl_pooled; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta_baseline" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K_pooled; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "baseline_k" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= logpd_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "logpd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= theta_k_test_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_k_test" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        param_names__.emplace_back(std::string() + "fe_test" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= mu_baseline_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_baseline" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_baseline_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_baseline" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_pooled; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K_bsl_pooled; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta_baseline" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K_pooled; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_k" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "baseline_k" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= logpd_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "logpd" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= theta_k_test_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_k_test" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        param_names__.emplace_back(std::string() + "fe_test" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_baseline\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_baseline_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau_baseline\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_baseline_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_pooled) + "},\"block\":\"parameters\"},{\"name\":\"eta_baseline\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_bsl_pooled) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"parameters\"},{\"name\":\"theta_k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_pooled) + "},\"block\":\"transformed_parameters\"},{\"name\":\"baseline_k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logpd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(logpd_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"theta_k_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_k_test_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fe_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_baseline\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_baseline_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mu_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau_baseline\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_baseline_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_pooled) + "},\"block\":\"parameters\"},{\"name\":\"eta_baseline\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_bsl_pooled) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"parameters\"},{\"name\":\"theta_k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_pooled) + "},\"block\":\"transformed_parameters\"},{\"name\":\"baseline_k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logpd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(logpd_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"theta_k_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_k_test_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"fe_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((mu_baseline_1dim__ + mu_1dim__) +
      tau_baseline_1dim__) + tau_1dim__) + K_pooled) + K_bsl_pooled) + Nc);
    const size_t num_transformed = emit_transformed_parameters * ((K_pooled +
      K));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((logpd_1dim__ + theta_k_test_1dim__) + N_test));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((mu_baseline_1dim__ + mu_1dim__) +
      tau_baseline_1dim__) + tau_1dim__) + K_pooled) + K_bsl_pooled) + Nc);
    const size_t num_transformed = emit_transformed_parameters * ((K_pooled +
      K));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((logpd_1dim__ + theta_k_test_1dim__) + N_test));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_logit_namespace::model_logit;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_logit_namespace::profiles__;
}
#endif
#endif
